# run again.  Do not edit this file unless you know what you are doing.

from pathlib import Path

from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QMetaObject, Qt
from PySide6.QtGui import QFont, QColor
from PySide6.QtWidgets import QHBoxLayout, QFontDialog, QColorDialog

from videotrans.configure import config
from videotrans.configure.config import tr


class Ui_vasrt(object):
    def setupUi(self, vasrt):
        self.has_done = False
        if not vasrt.objectName():
            vasrt.setObjectName(u"vasrt")
        vasrt.setMinimumSize(1000, 500)


        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(vasrt.sizePolicy().hasHeightForWidth())
        vasrt.setSizePolicy(sizePolicy)

        self.horizontalLayout_3 = QHBoxLayout(vasrt)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")

        # start
        self.v3 = QtWidgets.QVBoxLayout()
        self.v3.setObjectName("v3")

        # h3
        self.h3 = QtWidgets.QHBoxLayout()
        self.h3.setObjectName("horizontalLayout_3")
        self.label_4 = QtWidgets.QLabel()
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(100, 40))
        self.label_4.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.h3.addWidget(self.label_4, 0, QtCore.Qt.AlignTop)

        self.ysphb_videoinput = QtWidgets.QLineEdit()
        self.ysphb_videoinput.setMinimumSize(QtCore.QSize(0, 40))
        self.ysphb_videoinput.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.ysphb_videoinput.setReadOnly(True)
        self.ysphb_videoinput.setObjectName("ysphb_videoinput")
        self.h3.addWidget(self.ysphb_videoinput, 0, QtCore.Qt.AlignTop)

        self.ysphb_selectvideo = QtWidgets.QPushButton()
        self.ysphb_selectvideo.setMinimumSize(QtCore.QSize(150, 40))
        self.ysphb_selectvideo.setObjectName("ysphb_selectvideo")
        self.h3.addWidget(self.ysphb_selectvideo, 0, QtCore.Qt.AlignTop)

        # v3 add h3
        self.v3.addLayout(self.h3)

        # h5
        self.h5 = QtWidgets.QHBoxLayout()
        self.h5.setObjectName("horizontalLayout_5")
        self.label_5 = QtWidgets.QLabel()
        self.label_5.setMinimumSize(QtCore.QSize(100, 40))
        self.label_5.setObjectName("label_5")
        self.h5.addWidget(self.label_5, 0, QtCore.Qt.AlignTop)

        self.ysphb_wavinput = QtWidgets.QLineEdit()
        self.ysphb_wavinput.setMinimumSize(QtCore.QSize(0, 40))
        self.ysphb_wavinput.setObjectName("ysphb_wavinput")
        self.h5.addWidget(self.ysphb_wavinput, 0, QtCore.Qt.AlignTop)

        self.ysphb_wavinput.textChanged.connect(self.remainraw)

        self.ysphb_selectwav = QtWidgets.QPushButton()
        self.ysphb_selectwav.setMinimumSize(QtCore.QSize(150, 40))
        self.ysphb_selectwav.setObjectName("ysphb_selectwav")
        self.h5.addWidget(self.ysphb_selectwav, 0, QtCore.Qt.AlignTop)
        self.v3.addLayout(self.h5)

        # h6
        self.h6 = QtWidgets.QHBoxLayout()
        self.h6.setObjectName("h6")

        self.label_6 = QtWidgets.QLabel()
        self.label_6.setMinimumSize(QtCore.QSize(100, 40))
        self.label_6.setObjectName("label_6")
        self.h6.addWidget(self.label_6, 0, QtCore.Qt.AlignTop)
        self.ysphb_srtinput = QtWidgets.QLineEdit()
        self.ysphb_srtinput.setMinimumSize(QtCore.QSize(0, 40))
        self.ysphb_srtinput.setObjectName("ysphb_srtinput")

        self.h6.addWidget(self.ysphb_srtinput, 0, QtCore.Qt.AlignTop)
        self.ysphb_selectsrt = QtWidgets.QPushButton()
        self.ysphb_selectsrt.setMinimumSize(QtCore.QSize(150, 40))
        self.ysphb_selectsrt.setObjectName("ysphb_selectsrt")
        self.h6.addWidget(self.ysphb_selectsrt, 0, QtCore.Qt.AlignTop)

        self.h7 = QtWidgets.QHBoxLayout()
        self.h7.setObjectName("h7")
        self.ysphb_replace = QtWidgets.QCheckBox()
        self.ysphb_replace.setObjectName("ysphb_replace")
        self.ysphb_replace.setDisabled(True)
        self.ysphb_replace.setText(tr('Preserve the original sound in the video'))



        label_audio = QtWidgets.QLabel()
        label_audio.setText(tr("Audio duration > video"))
        self.audio_process = QtWidgets.QComboBox()
        self.audio_process.setObjectName("audio_process")
        self.audio_process.addItems([
            tr("Truncate"),
            tr("Auto Accelerate"),
            tr("Video copy"),
        ])

        self.ysphb_maxlenlabel = QtWidgets.QLabel()
        self.ysphb_maxlenlabel.setText(tr("Number of characters per line"))
        self.ysphb_maxlenlabel.setToolTip(tr("Number of characters per line of embed hard subtitles"))
        self.ysphb_maxlen = QtWidgets.QLineEdit()
        self.ysphb_maxlen.setObjectName("ysphb_maxlen")
        self.ysphb_maxlen.setText('16')
        self.ysphb_maxlen.setToolTip(tr("Only works when hard subtitles are embedded"))

        self.layout_form0 = QtWidgets.QFormLayout()
        self.layout_form0.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.ysphb_maxlenlabel)
        self.layout_form0.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.ysphb_maxlen)

        self.remain_hr = QtWidgets.QCheckBox()
        self.remain_hr.setObjectName("remain_hr")
        self.remain_hr.setChecked(False)
        self.remain_hr.setText(tr("Preserve line breaks"))
        self.remain_hr.setToolTip(tr("When embedding bilingual hard subtitles, please select"))

        self.ysphb_issoft = QtWidgets.QCheckBox()
        self.ysphb_issoft.setObjectName("ysphb_issoft")
        self.ysphb_issoft.setChecked(False)
        self.ysphb_issoft.setText(tr("Embedded Soft Subtitles"))

        self.layout_form = QtWidgets.QFormLayout()

        self.languagelabel = QtWidgets.QLabel()
        self.languagelabel.setText(tr("soft subtitle language"))
        self.languagelabel.setStyleSheet('color:#777')
        self.language = QtWidgets.QComboBox()
        self.language.setMinimumSize(QtCore.QSize(0, 30))
        self.language.setObjectName("language")

        self.language.setDisabled(True)
        self.ysphb_issoft.toggled.connect(self.update_language)

        self.layout_form.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.languagelabel)
        self.layout_form.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.language)

        self.h7.addWidget(self.ysphb_replace)
        self.h7.addWidget(label_audio)
        self.h7.addWidget(self.audio_process)
        self.h7.addLayout(self.layout_form0)
        self.h7.addWidget(self.remain_hr)
        self.h7.addStretch()
        self.h7.addWidget(self.ysphb_issoft)
        self.h7.addLayout(self.layout_form)

        self.v3.addLayout(self.h6)
        self.v3.addLayout(self.h7)

        label_position = QtWidgets.QLabel()
        label_position.setText(tr("Hard subtitle position"))
        self.position = QtWidgets.QComboBox()
        self.position.setObjectName("position")
        self.position.addItems(list(config.POSTION_ASS_VK.keys()))
        self.position.setToolTip(tr("Position of subtitle in video"))

        left_label = QtWidgets.QLabel()
        left_label.setText(tr("Margin Left"))
        self.marginL = QtWidgets.QLineEdit()
        self.marginL.setText('0')
        self.marginL.setMinimumWidth(50)
        self.marginL.setObjectName("marginL")

        bottom_label = QtWidgets.QLabel()
        bottom_label.setText(tr("Margin Vcenter"))
        self.marginV = QtWidgets.QLineEdit()
        self.marginV.setText('10')
        self.marginV.setMinimumWidth(50)
        self.marginV.setObjectName("marginV")

        right_label = QtWidgets.QLabel()
        right_label.setText(tr("Margin Right"))
        self.marginR = QtWidgets.QLineEdit()
        self.marginR.setText('0')
        self.marginR.setMinimumWidth(50)
        self.marginR.setObjectName("marginR")



        outline_label = QtWidgets.QLabel()
        outline_label.setText(tr("Outline"))
        self.outline = QtWidgets.QLineEdit()
        self.outline.setText('1')
        self.outline.setMinimumWidth(50)
        self.outline.setObjectName("outline")

        shadow_label = QtWidgets.QLabel()
        shadow_label.setText(tr("Shadow"))
        self.shadow = QtWidgets.QLineEdit()
        self.shadow.setText('1')
        self.shadow.setMinimumWidth(50)
        self.shadow.setObjectName("shadow")

        fontsize_label = QtWidgets.QLabel()
        fontsize_label.setText(tr("Font Size"))
        self.font_size_edit = QtWidgets.QLineEdit()
        self.font_size_edit.setMinimumWidth(50)
        self.font_size_edit.setText('14')
        self.font_size_edit.setObjectName("font_size_edit")
        self.font_size_edit.setPlaceholderText(tr("Font Size"))
        self.font_size_edit.setToolTip(tr("Font Size"))

        self.font_button = QtWidgets.QPushButton(tr("Select Fonts"))
        self.font_button.setToolTip(tr("Click it for select fonts"))
        self.font_button.clicked.connect(self.choose_font)
        self.font_button.setMinimumWidth(150)
        self.font_button.setCursor(Qt.PointingHandCursor)

        self.color_button = QtWidgets.QPushButton(tr("Text Colors"))
        self.color_button.setCursor(Qt.PointingHandCursor)
        self.color_button.clicked.connect(self.choose_color)
        self.color_button.setMinimumWidth(150)

        self.backgroundcolor_button = QtWidgets.QPushButton(
            tr("Backgroud Colors"))
        self.backgroundcolor_button.setCursor(Qt.PointingHandCursor)
        self.backgroundcolor_button.setMinimumWidth(150)
        self.backgroundcolor_button.clicked.connect(self.choose_backgroundcolor)
        self.backgroundcolor_button.setToolTip(
            tr("May not work in different players"))

        self.bordercolor_button = QtWidgets.QPushButton(tr("Border Colors"))
        self.bordercolor_button.setCursor(Qt.PointingHandCursor)
        self.bordercolor_button.clicked.connect(self.choose_bordercolor)
        self.bordercolor_button.setToolTip(
            tr("May not work in different players"))
        self.bordercolor_button.setMinimumWidth(150)

        # 初始化字体和颜色
        self.selected_font = QFont('Arial', 14)  # 默认字体
        self.selected_color = QColor('#FFFFFFFF')  # 默认颜色
        self.selected_backgroundcolor = QColor('#80000000')  # 默认颜色
        self.selected_bordercolor = QColor('#80000000')  # 默认颜色




        self.ysphb_borderstyle = QtWidgets.QCheckBox()
        self.ysphb_borderstyle.setObjectName("ysphb_borderstyle")
        self.ysphb_borderstyle.setChecked(False)
        self.ysphb_borderstyle.setToolTip(
            tr("Unchecked means there is an outline stroke shadow but no background color block, and the opposite is true if checked"))
        self.ysphb_borderstyle.setText(tr("Background color area Style"))

        format_layout = QHBoxLayout()
        format_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)

        format_layout.addWidget(label_position)
        format_layout.addWidget(self.position)
        format_layout.addStretch()
        format_layout.addWidget(left_label)
        format_layout.addWidget(self.marginL)
        format_layout.addStretch()
        format_layout.addWidget(bottom_label)
        format_layout.addWidget(self.marginV)
        format_layout.addStretch()
        format_layout.addWidget(right_label)
        format_layout.addWidget(self.marginR)
        format_layout.addStretch()
        format_layout.addWidget(outline_label)
        format_layout.addWidget(self.outline)
        format_layout.addStretch()
        format_layout.addWidget(shadow_label)
        format_layout.addWidget(self.shadow)

        format_layout2 = QHBoxLayout()
        format_layout2.setAlignment(Qt.AlignmentFlag.AlignLeft)

        format_layout2.addWidget(fontsize_label)
        format_layout2.addWidget(self.font_size_edit)
        format_layout2.addStretch()
        format_layout2.addWidget(self.font_button)
        format_layout2.addWidget(self.color_button)
        format_layout2.addWidget(self.backgroundcolor_button)
        format_layout2.addWidget(self.bordercolor_button)
        format_layout2.addWidget(self.ysphb_borderstyle)

        self.v3.addLayout(format_layout)
        self.v3.addLayout(format_layout2)

        self.ysphb_startbtn = QtWidgets.QPushButton()
        self.ysphb_startbtn.setMinimumSize(QtCore.QSize(250, 40))
        self.ysphb_startbtn.setObjectName("ysphb_startbtn")
        self.v3.addWidget(self.ysphb_startbtn)
        self.v3.addStretch()

        self.h8 = QtWidgets.QHBoxLayout()
        self.h8.setObjectName("horizontalLayout_20")
        self.ysphb_out = QtWidgets.QLineEdit()
        self.ysphb_out.setMinimumSize(QtCore.QSize(0, 30))
        self.ysphb_out.setReadOnly(True)
        self.ysphb_out.setObjectName("ysphb_out")
        self.h8.addWidget(self.ysphb_out)
        self.ysphb_opendir = QtWidgets.QPushButton()
        self.ysphb_opendir.setMinimumSize(QtCore.QSize(0, 30))
        self.ysphb_opendir.setObjectName("ysphb_opendir")
        self.h8.addWidget(self.ysphb_opendir)
        self.v3.addLayout(self.h8)

        # end
        self.horizontalLayout_3.addLayout(self.v3)
        vasrt.setWindowTitle(tr("Video, audio, and subtitle merging"))
        self.retranslateUi()

        QMetaObject.connectSlotsByName(vasrt)

    def qcolor_to_ass_color(self, color, type='fc'):
        # 获取颜色的 RGB 值
        r = color.red()
        g = color.green()
        b = color.blue()
        a = color.alpha()
        if type in ['bg', 'bd']:
            return f"&H{a:02X}{b:02X}{g:02X}{r:02X}".upper()
        # 将 RGBA 转换为 ASS 的颜色格式 &HBBGGRR

        return f"&H{a:02X}{b:02X}{g:02X}{r:02X}".upper()
        # return f"&H{b:02X}{g:02X}{r:02X}"

    def choose_font(self):

        dialog = QFontDialog(self.selected_font, self)
        if dialog.exec():
            font = dialog.selectedFont()
            font_name = font.family()
            font_size = font.pointSize()
            self.selected_font = font
            self.font_size_edit.setText(str(font_size))
            self.font_button.setText(font_name)
            self._setfont()

    def _setfont(self):
        bgcolor_name = self.selected_backgroundcolor.name()
        bgcolor =  f'background-color:{bgcolor_name}'
        bdcolor_name = self.selected_bordercolor.name()
        bdcolor =  f'border:1px solid {bdcolor_name}'
        color_name = self.selected_color.name() #blend_colors(self.selected_color, bgcolor_name)
        color = f'color:{color_name}'
        font = self.selected_font
        button_style = f"""font-family:'{font.family()}';font-size:{font.pointSize()}px;font-weight:{700 if font.bold() else 400};font-style:{'italic' if font.italic() else 'normal'};{bgcolor};{color};{bdcolor}"""
        self.font_button.setStyleSheet(button_style)

    def choose_color(self):
        color = self.selected_color
        color.setAlpha(0)  # Set default alpha to 0 (fully opaque)
        dialog = QColorDialog(color, self)
        dialog.setOption(QColorDialog.ShowAlphaChannel, True)  # 启用透明度选择
        dialog.exec()  # or dialog.open()
        color = dialog.currentColor()
        if color.isValid():
            self.selected_color = color
            self._setfont()

    def choose_backgroundcolor(self):
        color = self.selected_backgroundcolor
        color.setAlpha(0)  # Set default alpha to 0 (fully opaque)
        dialog = QColorDialog(color, self)
        dialog.setOption(QColorDialog.ShowAlphaChannel, True)  # 启用透明度选择

        dialog.exec()  # or dialog.open() to show non-model dialog to enable alpha setting
        color = dialog.currentColor()

        if color.isValid():
            self.selected_backgroundcolor = color
            self._setfont()

    def choose_bordercolor(self):

        color = self.selected_bordercolor

        dialog = QColorDialog(color, self)
        dialog.setOption(QColorDialog.ShowAlphaChannel, True)  # 启用透明度选择

        dialog.exec()  # or dialog.open()
        color = dialog.currentColor()
        if color.isValid():
            self.selected_bordercolor = color
            self._setfont()

    def remainraw(self, t):
        if Path(t).is_file():
            self.ysphb_replace.setDisabled(False)
            self.ysphb_replace.setChecked(True)
        else:
            self.ysphb_replace.setChecked(False)
            self.ysphb_replace.setDisabled(True)

    def update_language(self, state):
        self.languagelabel.setStyleSheet(f"""color:#f1f1f1""" if state else 'color:#777777')
        self.language.setDisabled(False if state else True)

        self.font_button.setDisabled(True if state else False)
        self.font_size_edit.setDisabled(True if state else False)
        self.color_button.setDisabled(True if state else False)
        self.backgroundcolor_button.setDisabled(True if state else False)
        self.bordercolor_button.setDisabled(True if state else False)

    def retranslateUi(self):


        self.label_4.setText(tr("Video"))
        self.label_5.setText(tr("Audio"))
        self.label_6.setText(tr("Subtitles/srt"))
        self.ysphb_selectvideo.setText(tr("Select a Video"))
        self.ysphb_videoinput.setPlaceholderText(tr("Select a Video"))
        self.ysphb_selectwav.setText(tr("Select a Audio"))
        self.ysphb_wavinput.setPlaceholderText(tr("Select a Audio"))
        self.ysphb_selectsrt.setText(tr("Select a Srt file"))
        self.ysphb_srtinput.setPlaceholderText(tr("Select a Srt file"))
        self.ysphb_startbtn.setText(tr("Start operating"))
        self.ysphb_opendir.setText(tr("Open the results catalog"))
