# run again.  Do not edit this file unless you know what you are doing.
import platform

from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QTimer
from PySide6.QtGui import Qt

from videotrans.configure import config
from videotrans.configure.config import box_lang


class Ui_recogn(object):
    def setupUi(self, recogn):
        self.has_done = False
        self.error_msg = ""
        recogn.setObjectName("recogn")
        recogn.setMinimumSize(1000, 500)

        self.centralwidget = QtWidgets.QWidget(recogn)
        self.centralwidget.setObjectName("centralwidget")

        self.shibie_out_path = None

        # 语音识别
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(recogn)

        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.shibie_widget = QtWidgets.QVBoxLayout()
        self.shibie_widget.setObjectName("shibie_widget")
        self.verticalLayout_3.addLayout(self.shibie_widget)

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.label_3 = QtWidgets.QLabel()
        self.label_3.setObjectName("label_3")
        self.shibie_language = QtWidgets.QComboBox()
        self.shibie_language.setMinimumSize(QtCore.QSize(100, 30))
        self.shibie_language.setObjectName("shibie_language")

        self.is_cuda = QtWidgets.QCheckBox()
        self.is_cuda.setObjectName("is_cuda")
        # 如果是 MAc系统则隐藏
        if platform.system() == 'Darwin':
            self.is_cuda.setVisible(False)

        self.shibie_label = QtWidgets.QPushButton()
        self.shibie_recogn_type = QtWidgets.QComboBox()
        self.shibie_recogn_type.setMinimumSize(QtCore.QSize(150, 30))
        self.shibie_recogn_type.setObjectName("shibie_recogn_type")

        self.label_model = QtWidgets.QLabel()

        self.shibie_model = QtWidgets.QComboBox()
        self.shibie_model.setMinimumSize(QtCore.QSize(100, 30))
        self.shibie_model.setObjectName("shibie_model")

        self.show_spk = QtWidgets.QCheckBox()
        self.show_spk.setObjectName('show_spk')
        self.show_spk.setChecked(config.params.get('paraformer_spk', False))
        self.show_spk.setVisible(False)

        self.shibie_split_type = QtWidgets.QComboBox()

        self.split_label = QtWidgets.QLabel()

        self.equal_split_time = QtWidgets.QLineEdit()
        self.equal_split_time_label = QtWidgets.QLabel()
        self.equal_split_time.setVisible(False)
        self.equal_split_time_label.setVisible(False)

        self.equal_split_layout = QtWidgets.QHBoxLayout()
        self.equal_split_layout.addWidget(self.equal_split_time)
        self.equal_split_layout.addWidget(self.equal_split_time_label)

        self.lable_out = QtWidgets.QLabel()
        self.out_format = QtWidgets.QComboBox()
        self.out_format.setMinimumSize(QtCore.QSize(100, 35))

        self.shibie_startbtn = QtWidgets.QPushButton()
        self.shibie_startbtn.setMinimumSize(QtCore.QSize(200, 35))
        self.shibie_startbtn.setObjectName("shibie_startbtn")

        self.shibie_stop = QtWidgets.QPushButton()
        self.shibie_stop.setFixedWidth(80)
        self.shibie_stop.setDisabled(True)

        self.horizontalLayout.addStretch()

        self.horizontalLayout.addWidget(self.label_3)
        self.horizontalLayout.addWidget(self.shibie_language)
        self.horizontalLayout.addWidget(self.shibie_label)
        self.horizontalLayout.addWidget(self.shibie_recogn_type)
        self.horizontalLayout.addWidget(self.label_model)
        self.horizontalLayout.addWidget(self.shibie_model)
        self.horizontalLayout.addWidget(self.show_spk)
        self.horizontalLayout.addWidget(self.split_label)
        self.horizontalLayout.addWidget(self.shibie_split_type)
        self.horizontalLayout.addLayout(self.equal_split_layout)
        self.horizontalLayout.addWidget(self.lable_out)
        self.horizontalLayout.addWidget(self.out_format)
        self.horizontalLayout.addStretch()
        self.verticalLayout_3.addLayout(self.horizontalLayout)

        recogn.setWindowTitle(config.uilanglist.get("Speech Recognition Text"))
        QtCore.QMetaObject.connectSlotsByName(recogn)
        QTimer.singleShot(0,self.retranslateUi)

    def retranslateUi(self):
        self.rephrase = QtWidgets.QCheckBox()

        self.rephrase_local = QtWidgets.QCheckBox()
        self.remove_noise = QtWidgets.QCheckBox()

        self.copysrt_rawvideo = QtWidgets.QCheckBox()
        self.copysrt_rawvideo.setMinimumSize(QtCore.QSize(0, 30))
        self.copysrt_rawvideo.setObjectName("copysrt_rawvideo")


        self.h4 = QtWidgets.QHBoxLayout()
        self.h4.addStretch()
        self.h4.addWidget(self.shibie_startbtn)
        self.h4.addWidget(self.shibie_stop)
        self.h4.addWidget(self.is_cuda)
        self.h4.addWidget(self.rephrase)
        self.h4.addWidget(self.rephrase_local)
        self.h4.addWidget(self.remove_noise)
        self.h4.addWidget(self.copysrt_rawvideo)
        self.h4.addStretch()
        # 语音调整行
        # 语音识别高级行
        self.hfaster_layout = QtWidgets.QHBoxLayout()
        self.threshold_label = QtWidgets.QLabel()
        self.threshold_label.setVisible(False)
        self.threshold = QtWidgets.QLineEdit()
        self.threshold.setMaximumWidth(80)
        self.threshold.setVisible(False)
        self.hfaster_layout.addWidget(self.threshold_label)
        self.hfaster_layout.addWidget(self.threshold)
        self.hfaster_layout.addStretch()

        self.min_speech_duration_ms_label = QtWidgets.QLabel()
        self.min_speech_duration_ms_label.setVisible(False)
        self.min_speech_duration_ms = QtWidgets.QLineEdit()
        self.min_speech_duration_ms.setMaximumWidth(80)
        self.min_speech_duration_ms.setVisible(False)
        self.hfaster_layout.addWidget(self.min_speech_duration_ms_label)
        self.hfaster_layout.addWidget(self.min_speech_duration_ms)
        self.hfaster_layout.addStretch()

        self.min_silence_duration_ms_label = QtWidgets.QLabel()
        self.min_silence_duration_ms_label.setVisible(False)
        self.min_silence_duration_ms = QtWidgets.QLineEdit()
        self.min_silence_duration_ms.setMaximumWidth(80)
        self.min_silence_duration_ms.setVisible(False)
        self.hfaster_layout.addWidget(self.min_silence_duration_ms_label)
        self.hfaster_layout.addWidget(self.min_silence_duration_ms)

        self.max_speech_duration_s_label = QtWidgets.QLabel()
        self.max_speech_duration_s_label.setVisible(False)
        self.max_speech_duration_s = QtWidgets.QLineEdit()
        self.max_speech_duration_s.setMaximumWidth(80)
        self.max_speech_duration_s.setVisible(False)
        self.hfaster_layout.addWidget(self.max_speech_duration_s_label)
        self.hfaster_layout.addWidget(self.max_speech_duration_s)

        self.speech_pad_ms_label = QtWidgets.QLabel()
        self.speech_pad_ms_label.setVisible(False)
        self.speech_pad_ms = QtWidgets.QLineEdit()
        self.speech_pad_ms.setMaximumWidth(80)
        self.speech_pad_ms.setVisible(False)
        self.hfaster_layout.addWidget(self.speech_pad_ms_label)
        self.hfaster_layout.addWidget(self.speech_pad_ms)

        self.verticalLayout_3.addLayout(self.hfaster_layout)
        self.verticalLayout_3.addLayout(self.h4)

        self.loglabel = QtWidgets.QPushButton()
        self.verticalLayout_3.addWidget(self.loglabel)

        self.shibie_text = QtWidgets.QPlainTextEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.shibie_text.sizePolicy().hasHeightForWidth())
        self.shibie_text.setSizePolicy(sizePolicy)
        self.shibie_text.setObjectName("shibie_text")
        self.shibie_text.setReadOnly(True)
        self.verticalLayout_3.addWidget(self.shibie_text)

        self.shibie_opendir = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.shibie_opendir.sizePolicy().hasHeightForWidth())
        self.shibie_opendir.setSizePolicy(sizePolicy)
        self.shibie_opendir.setFixedHeight(30)
        self.shibie_opendir.setObjectName("shibie_opendir")
        self.shibie_opendir.setDisabled(True)

        self.horizontalLayout_shibie8 = QtWidgets.QHBoxLayout()

        self.horizontalLayout_shibie8.addWidget(self.shibie_opendir)
        self.verticalLayout_3.addLayout(self.horizontalLayout_shibie8)

        self.label_shibie10 = QtWidgets.QLabel()
        self.verticalLayout_3.addWidget(self.label_shibie10)

        self.horizontalLayout_9.addLayout(self.verticalLayout_3)

        self.threshold_label.setText('threshold' if config.defaulelang != 'zh' else '语音识别阈值')
        self.shibie_startbtn.setCursor(Qt.PointingHandCursor)
        self.min_speech_duration_ms.setPlaceholderText('0ms')
        self.max_speech_duration_s_label.setText('max_speech_duration_s' if config.defaulelang != 'zh' else '最大语音持续时长')
        self.max_speech_duration_s.setPlaceholderText('5s')
        self.speech_pad_ms.setToolTip(
            '语音填充时间，单位：毫秒。' if config.defaulelang == 'zh' else 'Speech padding (ms)')
        self.shibie_opendir.setCursor(Qt.PointingHandCursor)
        self.is_cuda.setText("启用CUDA?" if config.defaulelang == 'zh' else 'Enable CUDA?')
        self.shibie_label.setText("语音识别\u2193")
        self.shibie_label.setStyleSheet("""background-color:transparent""")
        self.shibie_label.setCursor(Qt.PointingHandCursor)
        self.shibie_label.setToolTip(
            '当faster-whisper时，可点击设置详细识别参数' if config.defaulelang == 'zh' else 'Click to set detailed recognition parameters when using faster-whisper')
        self.label_model.setText('选择模型' if config.defaulelang == 'zh' else 'Select model')
        self.show_spk.setText("识别说话人?" if config.defaulelang == 'zh' else 'Speaker classification?')
        self.shibie_split_type.addItems(
            [config.transobj['whisper_type_all'],
             config.transobj['whisper_type_avg']]
        )
        self.shibie_split_type.setToolTip(config.transobj['fenge_tips'])
        self.split_label.setText('分割模式' if config.defaulelang == 'zh' else 'Split mode')
        self.equal_split_time.setToolTip(
            '每段分割时长/单位秒' if config.defaulelang == 'zh' else 'Duration of each segment/second')
        self.equal_split_time.setText(str(config.settings.get('interval_split', 10)))
        self.equal_split_time_label.setText('秒' if config.defaulelang == 'zh' else 'Sec')
        self.lable_out.setText('输出字幕格式' if config.defaulelang == 'zh' else 'Subtitle format:')
        self.out_format.addItems([
            "srt",
            "ass",
            "vtt",
            "txt"
        ])
        self.shibie_stop.setText("停止" if config.defaulelang == 'zh' else 'Stop')
        self.shibie_stop.setCursor(Qt.PointingHandCursor)
        self.rephrase.setText('LLM重新断句' if config.defaulelang == 'zh' else 'LLM Rephrase')
        self.rephrase.setToolTip('选择faster/openai-whisper渠道时将使用大模型重新断句，若失败将使用原始分段' if config.defaulelang == 'zh' else 'When selecting the faster/openai-whisper channel, the large model will be used to re-segment the sentence. If it fails, the original segmentation will be used.')
        self.rephrase_local.setText('本地重新断句' if config.defaulelang == 'zh' else 'Rephrase Local')
        self.rephrase_local.setToolTip('选择faster/openai-whisper渠道时将本地基于算法重新断句，若结果中无标点，效果不佳' if config.defaulelang == 'zh' else 'When selecting the faster/openai-whisper channel, the local algorithm will be used to re-segment the sentence')

        self.remove_noise.setText('降噪' if config.defaulelang == 'zh' else 'Noise reduction')
        self.remove_noise.setToolTip(
            '若选中将从modelscope.cn下载模型做音频降噪处理，比较耗时' if config.defaulelang == 'zh' else 'Select to perform noise reduction processing from modelscope.cn, which takes a long time')
        self.copysrt_rawvideo.setText('字幕输出原位置' if config.defaulelang == 'zh' else 'Moving subtitle')
        self.copysrt_rawvideo.setToolTip(
            '选中则字幕将保存到原音视频位置，并重命名为原音视频同名' if config.defaulelang == 'zh' else 'If selected, the subtitles will be saved to the original audio and video location and renamed to the same name as the original audio and video')
        self.threshold.setPlaceholderText('200ms')
        self.threshold.setToolTip(
            '表示语音的概率阈值，VAD 会输出每个音频片段的语音概率。' if config.defaulelang == 'zh' else 'Threshold for speech detection')
        self.threshold.setText(str(config.settings.get('threshold', 0.5)))
        self.min_speech_duration_ms_label.setText(
            'min_speech_duration_ms' if config.defaulelang != 'zh' else '最小语音持续毫秒')
        self.min_speech_duration_ms.setText(str(config.settings.get('min_speech_duration_ms', 0)))
        self.min_speech_duration_ms.setToolTip(
            '最小语音持续时间，单位：毫秒。' if config.defaulelang == 'zh' else 'Minimum speech duration (ms)')
        self.min_silence_duration_ms_label.setText(
            'min_silence_duration_ms' if config.defaulelang != 'zh' else '最小静音持续毫秒')
        self.min_silence_duration_ms.setPlaceholderText('200ms')
        self.min_silence_duration_ms.setText(str(config.settings.get('min_silence_duration_ms', 2000)))
        self.min_silence_duration_ms.setToolTip(
            '最小静音持续时间，单位：毫秒。' if config.defaulelang == 'zh' else 'Minimum silence duration (ms)')
        self.max_speech_duration_s.setText(str(config.settings.get('max_speech_duration_s', 2000)))
        self.max_speech_duration_s.setToolTip(
            '最大语音持续时间，单位：秒。' if config.defaulelang == 'zh' else 'max speech duration (s)')
        self.speech_pad_ms_label.setText('speech_pad_ms' if config.defaulelang != 'zh' else '填充毫秒')
        self.speech_pad_ms.setPlaceholderText('200ms')
        self.speech_pad_ms.setText(str(config.settings.get('speech_pad_ms', 400)))
        self.loglabel.setStyleSheet('''color:#148cd2;background-color:transparent''')
        self.shibie_opendir.setText('打开识别结果保存目录' if config.defaulelang == 'zh' else 'Open Output dir')

        self.label_3.setText(box_lang.get("Source lang"))
        self.shibie_startbtn.setText(box_lang.get("Start"))
