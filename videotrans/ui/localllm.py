# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import Qt

from videotrans.configure import config
from videotrans.configure.config import tr
from videotrans.util import tools


class Ui_localllmform(object):
    def setupUi(self, localllmform):
        self.has_done = False
        localllmform.setObjectName("localllmform")
        localllmform.setWindowModality(QtCore.Qt.NonModal)
        localllmform.resize(600, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(localllmform.sizePolicy().hasHeightForWidth())
        localllmform.setSizePolicy(sizePolicy)
        localllmform.setMaximumSize(QtCore.QSize(600, 600))

        v1 = QtWidgets.QVBoxLayout(localllmform)

        h1 = QtWidgets.QHBoxLayout()
        h2 = QtWidgets.QHBoxLayout()
        h3 = QtWidgets.QHBoxLayout()
        h4 = QtWidgets.QHBoxLayout()

        self.label_0 = QtWidgets.QLabel()
        self.label_0.setText(
            tr("AIs compatible with the ChatGPT Local LLM also used here"))

        v1.addWidget(self.label_0)

        self.label = QtWidgets.QLabel(localllmform)
        self.label.setMinimumSize(QtCore.QSize(0, 35))
        self.label.setObjectName("label")
        self.localllm_api = QtWidgets.QLineEdit(localllmform)
        self.localllm_api.setMinimumSize(QtCore.QSize(0, 35))
        self.localllm_api.setObjectName("localllm_api")
        h1.addWidget(self.label)
        h1.addWidget(self.localllm_api)
        v1.addLayout(h1)

        self.label_2 = QtWidgets.QLabel(localllmform)
        self.label_2.setMinimumSize(QtCore.QSize(0, 35))
        self.label_2.setSizeIncrement(QtCore.QSize(0, 35))
        self.label_2.setObjectName("label_2")
        self.localllm_key = QtWidgets.QLineEdit(localllmform)
        self.localllm_key.setMinimumSize(QtCore.QSize(0, 35))
        self.localllm_key.setObjectName("localllm_key")
        h2.addWidget(self.label_2)
        h2.addWidget(self.localllm_key)

        h_token = QtWidgets.QHBoxLayout()
        label_token = QtWidgets.QLabel(localllmform)
        label_token.setMinimumSize(QtCore.QSize(0, 35))
        label_token.setSizeIncrement(QtCore.QSize(0, 35))
        label_token.setObjectName("label_token")
        label_token.setText(tr("Maximum output token"))
        self.localllm_max_token = QtWidgets.QLineEdit(localllmform)
        self.localllm_max_token.setMinimumSize(QtCore.QSize(0, 35))
        self.localllm_max_token.setObjectName("localllm_max_token")

        label_temp = QtWidgets.QLabel(localllmform)
        label_temp.setMinimumSize(QtCore.QSize(0, 35))
        label_temp.setText("temperature")

        self.localllm_temperature = QtWidgets.QLineEdit(localllmform)
        self.localllm_temperature.setObjectName("localllm_temperature")

        label_top_p = QtWidgets.QLabel(localllmform)
        label_top_p.setMinimumSize(QtCore.QSize(0, 35))
        label_top_p.setText("top_p")

        self.localllm_top_p = QtWidgets.QLineEdit(localllmform)
        self.localllm_top_p.setObjectName("localllm_top_p")

        h_token.addWidget(label_token)
        h_token.addWidget(self.localllm_max_token)

        h_token.addWidget(label_temp)
        h_token.addWidget(self.localllm_temperature)

        h_token.addWidget(label_top_p)
        h_token.addWidget(self.localllm_top_p)

        v1.addLayout(h2)
        v1.addLayout(h_token)

        self.label_3 = QtWidgets.QLabel(localllmform)
        self.label_3.setObjectName("label_3")
        self.localllm_model = QtWidgets.QComboBox(localllmform)
        self.localllm_model.setMinimumSize(QtCore.QSize(0, 35))
        self.localllm_model.setObjectName("localllm_model")
        h3.addWidget(self.label_3)
        h3.addWidget(self.localllm_model)
        v1.addLayout(h3)

        self.label_allmodels = QtWidgets.QLabel(localllmform)
        self.label_allmodels.setObjectName("label_allmodels")
        self.label_allmodels.setText(
            tr("Fill in all available models, separated by commas. After filling in, you can select them above"))
        v1.addWidget(self.label_allmodels)
        self.edit_allmodels = QtWidgets.QPlainTextEdit(localllmform)
        self.edit_allmodels.setObjectName("edit_allmodels")
        v1.addWidget(self.edit_allmodels)

        self.label_4 = QtWidgets.QLabel(localllmform)
        self.label_4.setObjectName("label_4")
        v1.addWidget(self.label_4)

        self.localllm_template = QtWidgets.QPlainTextEdit(localllmform)
        self.localllm_template.setObjectName("localllm_template")
        self.localllm_template.setReadOnly(True)
        v1.addWidget(self.localllm_template)

        self.set_localllm = QtWidgets.QPushButton(localllmform)

        self.set_localllm.setMinimumSize(QtCore.QSize(0, 35))
        self.set_localllm.setObjectName("set_localllm")

        self.test_localllm = QtWidgets.QPushButton(localllmform)
        self.test_localllm.setMinimumSize(QtCore.QSize(0, 30))
        self.test_localllm.setObjectName("test_localllm")
        help_btn = QtWidgets.QPushButton()
        help_btn.setMinimumSize(QtCore.QSize(0, 35))
        help_btn.setStyleSheet("background-color: rgba(255, 255, 255,0)")
        help_btn.setObjectName("help_btn")
        help_btn.setCursor(Qt.PointingHandCursor)
        help_btn.setText(tr("Fill out the tutorial"))
        help_btn.clicked.connect(lambda: tools.open_url(url='https://pyvideotrans.com/localllm'))
        h4.addWidget(self.set_localllm)
        h4.addWidget(self.test_localllm)
        h4.addWidget(help_btn)
        v1.addLayout(h4)
        self.localllm_template.setPlainText((tr("Prompt: Please open the {} file directly to modify it", 'localllm' if config.defaulelang=='zh' else 'localllm-en')))

        self.retranslateUi(localllmform)
        QtCore.QMetaObject.connectSlotsByName(localllmform)

    def update_ui(self):
        from videotrans.configure import config
        config.settings = config.parse_init()
        allmodels_str = config.settings.get('localllm_model','')
        allmodels = config.settings.get('localllm_model','').split(',')
        self.localllm_model.clear()
        self.localllm_model.addItems(allmodels)
        self.edit_allmodels.setPlainText(allmodels_str)
        self.localllm_key.setText(config.params.get("localllm_key",''))
        self.localllm_api.setText(config.params.get("localllm_api",''))
        self.localllm_model.setCurrentText(config.params.get("localllm_model",''))
        self.localllm_max_token.setText(str(config.params.get("localllm_max_token",'')))
        self.localllm_temperature.setText(str(config.params.get("localllm_temperature",'')))
        self.localllm_top_p.setText(str(config.params.get("localllm_top_p",'')))

    def retranslateUi(self, localllmform):
        localllmform.setWindowTitle(tr("Local LLM API"))
        self.label_3.setText(tr("Model"))
        self.label_4.setText(
            tr("{lang} represents the target language name, do not delete it."))
        self.set_localllm.setText(tr("Save"))
        self.test_localllm.setText(tr("Test"))
        self.localllm_api.setPlaceholderText(
            tr("Local LLM API url"))
        self.localllm_key.setPlaceholderText("Secret key")
        self.localllm_key.setToolTip(tr("If not remain empty"))
        self.label.setText(tr("API URL"))
        self.label_2.setText(tr("SK"))
